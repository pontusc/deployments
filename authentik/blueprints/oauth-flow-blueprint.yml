version: 1
metadata:
  name: oauth-flow
entries:
  # Dependencies, need google oauth source to exist
  - model: authentik_blueprints.metaapplyblueprint
    attrs:
      identifiers:
        name: google-oauth-source

  # Replaces existing policy with below, to only allow specific user to register with SSO
  - model: authentik_policies_expression.expressionpolicy
    identifiers:
      name: default-source-enrollment-if-sso
    attrs:
      expression: |
        allowed_emails = ["pontuscurtsson@gmail.com"]
        admin_email = "pontuscurtsson@gmail.com"
        current_email = request.context["prompt_data"]["email"]

        if current_email in allowed_emails:
            if current_email == admin_email:
                argocd_group = Group.objects.get(name="ArgoCD Admins")
                authentik_group = Group.objects.get(name="authentik Admins")
            else:
                argocd_group = Group.objects.get(name="ArgoCD Viewers")
                authentik_group = Group.objects.get(name="authentik Read-only")

            # Set username to current email, SSO should use email as user
            # Also assign groups and set to internal
            request.context["prompt_data"]["username"] = current_email
            request.context["prompt_data"]["type"] = "internal"
            request.context["prompt_data"]["groups"] = [argocd_group, authentik_group]
            return ak_is_sso_flow
        else:
            ak_message("Access denied for this email")
            return False

  - model: authentik_stages_identification.identificationstage
    identifiers:
      name: default-authentication-identification
    attrs:
      sources:
        - !Find [authentik_sources_oauth.oauthsource, [slug, google]]
